# coding: utf-8

"""
Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3

 Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from grabfood.models.update_advanced_pricing import UpdateAdvancedPricing
from grabfood.models.update_purchasability import UpdatePurchasability
from typing import Optional, Set
from typing_extensions import Self

class MenuEntity(BaseModel):
    """
    MenuEntity
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The record's ID on the partner system. For example, the item id in case type is ITEM, modifier id is MODIFIER.")
    price: Optional[StrictInt] = Field(default=None, description="The record's price in minor unit format.")
    available_status: Optional[StrictStr] = Field(default=None, description="The record's availableStatus.  Note: In order to set an item as \"UNAVAILABLE\", it is required to update both the `availableStatus` and `maxStock` fields, whereby the `maxStock` value should be set to 0. ", alias="availableStatus")
    max_stock: Optional[StrictInt] = Field(default=None, description="Available stocks under inventory for this item. Auto reduce when there is order placed for this item.  Note: It is necessary to set `maxStock` to 0 if the `availableStatus` of the item is \"UNAVAILABLE\". Item will be set to \"AVAILABLE\" if `maxStock` > 0. ", alias="maxStock")
    advanced_pricings: Optional[List[UpdateAdvancedPricing]] = Field(default=None, description="Price configuration (in minor unit) for different service, order type and channel combination. If a service type does not have a specified price, it will utilize the default price of the item. ", alias="advancedPricings")
    purchasabilities: Optional[List[UpdatePurchasability]] = Field(default=None, description="Purchasability is set to true by default for all service type, unless it is explicitly set to false. Modifier will reuse it’s item’s purchasability. ")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["id", "price", "availableStatus", "maxStock", "advancedPricings", "purchasabilities"]

    @field_validator('available_status')
    def available_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AVAILABLE', 'UNAVAILABLE', 'UNAVAILABLETODAY']):
            raise ValueError("must be one of enum values ('AVAILABLE', 'UNAVAILABLE', 'UNAVAILABLETODAY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MenuEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in advanced_pricings (list)
        _items = []
        if self.advanced_pricings:
            for _item_advanced_pricings in self.advanced_pricings:
                if _item_advanced_pricings:
                    _items.append(_item_advanced_pricings.to_dict())
            _dict['advancedPricings'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in purchasabilities (list)
        _items = []
        if self.purchasabilities:
            for _item_purchasabilities in self.purchasabilities:
                if _item_purchasabilities:
                    _items.append(_item_purchasabilities.to_dict())
            _dict['purchasabilities'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MenuEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "price": obj.get("price"),
            "availableStatus": obj.get("availableStatus"),
            "maxStock": obj.get("maxStock"),
            "advancedPricings": [UpdateAdvancedPricing.from_dict(_item) for _item in obj["advancedPricings"]] if obj.get("advancedPricings") is not None else None,
            "purchasabilities": [UpdatePurchasability.from_dict(_item) for _item in obj["purchasabilities"]] if obj.get("purchasabilities") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


