# coding: utf-8

"""
Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3

 Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from grabfood.models.advanced_pricing import AdvancedPricing
from typing import Optional, Set
from typing_extensions import Self

class MenuModifier(BaseModel):
    """
    MenuModifier
    """ # noqa: E501
    id: Annotated[str, Field(strict=True, max_length=64)] = Field(description="The modifier's ID that is on the partner's system. This ID should be unique.")
    name: Annotated[str, Field(strict=True, max_length=40)] = Field(description="The name of the modifier.")
    name_translation: Optional[Dict[str, StrictStr]] = Field(default=None, description="Translation of the modifier name. Only support up to 1 translated language. Refer [Menu Translation](#section/Menu-Translation).", alias="nameTranslation")
    available_status: StrictStr = Field(description="The status for the modifier. Refer to FAQs for more details about [availableStatus](#section/Menu/What-is-availableStatus).", alias="availableStatus")
    price: Optional[StrictInt] = Field(default=None, description="The modifier's price in minor format. Refer to FAQs for more details about [tax](#section/Menu/Is-the-menu-price-with-or-without-tax).")
    barcode: Optional[Annotated[str, Field(strict=True, max_length=64)]] = Field(default=None, description="The barcode Number (GTIN). GTIN must be 8, 12, 13, 14 numeric digits.")
    sequence: Optional[StrictInt] = Field(default=None, description="The sort or display order of the modifier within the menu.")
    advanced_pricing: Optional[AdvancedPricing] = Field(default=None, alias="advancedPricing")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["id", "name", "nameTranslation", "availableStatus", "price", "barcode", "sequence", "advancedPricing"]

    @field_validator('available_status')
    def available_status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['AVAILABLE', 'UNAVAILABLE', 'UNAVAILABLETODAY', 'HIDE']):
            raise ValueError("must be one of enum values ('AVAILABLE', 'UNAVAILABLE', 'UNAVAILABLETODAY', 'HIDE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MenuModifier from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of advanced_pricing
        if self.advanced_pricing:
            _dict['advancedPricing'] = self.advanced_pricing.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MenuModifier from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "nameTranslation": obj.get("nameTranslation"),
            "availableStatus": obj.get("availableStatus"),
            "price": obj.get("price"),
            "barcode": obj.get("barcode"),
            "sequence": obj.get("sequence"),
            "advancedPricing": AdvancedPricing.from_dict(obj["advancedPricing"]) if obj.get("advancedPricing") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


