# coding: utf-8

"""
Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3

 Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from grabfood.models.coordinates import Coordinates
from typing import Optional, Set
from typing_extensions import Self

class Address(BaseModel):
    """
    A JSON object containing the receiverâ€™s location information.
    """ # noqa: E501
    unit_number: Optional[StrictStr] = Field(default=None, description="The delivery address' unit number.", alias="unitNumber")
    delivery_instruction: Optional[StrictStr] = Field(default=None, description="Instructions for the delivery.", alias="deliveryInstruction")
    poi_source: Optional[StrictStr] = Field(default=None, description="POI source", alias="poiSource")
    poi_id: Optional[StrictStr] = Field(default=None, description="POI ID, empty when poiSource is GRAB.", alias="poiID")
    address: Optional[StrictStr] = Field(default=None, description="The delivery address containing street name, city, postal code, and country. Has value only when poiSource is `GRAB`.")
    postcode: Optional[StrictStr] = Field(default=None, description="The postcode of the delivery address. Has value only when poiSource is `GRAB`.")
    coordinates: Optional[Coordinates] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["unitNumber", "deliveryInstruction", "poiSource", "poiID", "address", "postcode", "coordinates"]

    @field_validator('poi_source')
    def poi_source_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['GRAB', 'GOOGLE']):
            raise ValueError("must be one of enum values ('GRAB', 'GOOGLE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Address from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of coordinates
        if self.coordinates:
            _dict['coordinates'] = self.coordinates.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Address from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "unitNumber": obj.get("unitNumber"),
            "deliveryInstruction": obj.get("deliveryInstruction"),
            "poiSource": obj.get("poiSource"),
            "poiID": obj.get("poiID"),
            "address": obj.get("address"),
            "postcode": obj.get("postcode"),
            "coordinates": Coordinates.from_dict(obj["coordinates"]) if obj.get("coordinates") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


