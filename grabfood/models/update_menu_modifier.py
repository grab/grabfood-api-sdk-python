# coding: utf-8

"""
Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3

 Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from grabfood.models.update_advanced_pricing import UpdateAdvancedPricing
from typing import Optional, Set
from typing_extensions import Self

class UpdateMenuModifier(BaseModel):
    """
    Information about the GrabFood client updating their food menu. 
    """ # noqa: E501
    merchant_id: StrictStr = Field(description="The merchant's ID that is in GrabFood's database.", alias="merchantID")
    var_field: StrictStr = Field(description="The record type that you want to update.", alias="field")
    id: StrictStr = Field(description="The record's ID on the partner system. For example, the modifier id in case type is MODIFIER.")
    price: Optional[StrictInt] = Field(default=None, description="The record's price in minor unit format.")
    name: StrictStr = Field(description="**Only required when updating modifiers.** The record's name. Used as identifier to locate the correct record.")
    available_status: Optional[StrictStr] = Field(default=None, description="The record's availableStatus.", alias="availableStatus")
    is_free: Optional[StrictBool] = Field(default=None, description="Allows the modifier's price to be explicitly set as zero. Possible values are as follows:   * `isFree` && `price == 0` sets the modifier's price to zero.   * `isFree` && `price > 0` returns an error message that \"price cannot be set to > 0, if modifier is free”.   * `!isFree` && `price > 0` sets the modifier's price to the defined price.   * `!isFree` && `price == 0` does not update the modifier's price and reuses the existing price. ", alias="isFree")
    advanced_pricings: Optional[List[UpdateAdvancedPricing]] = Field(default=None, description="Price configuration (in minor unit) for different service, order type and channel combination. If a service type does not have a specified price, it will utilize the default price of the item. ", alias="advancedPricings")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["merchantID", "field", "id", "price", "name", "availableStatus", "isFree", "advancedPricings"]

    @field_validator('var_field')
    def var_field_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['MODIFIER']):
            raise ValueError("must be one of enum values ('MODIFIER')")
        return value

    @field_validator('available_status')
    def available_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AVAILABLE', 'UNAVAILABLE', 'UNAVAILABLETODAY']):
            raise ValueError("must be one of enum values ('AVAILABLE', 'UNAVAILABLE', 'UNAVAILABLETODAY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateMenuModifier from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in advanced_pricings (list)
        _items = []
        if self.advanced_pricings:
            for _item_advanced_pricings in self.advanced_pricings:
                if _item_advanced_pricings:
                    _items.append(_item_advanced_pricings.to_dict())
            _dict['advancedPricings'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateMenuModifier from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "merchantID": obj.get("merchantID"),
            "field": obj.get("field"),
            "id": obj.get("id"),
            "price": obj.get("price"),
            "name": obj.get("name"),
            "availableStatus": obj.get("availableStatus"),
            "isFree": obj.get("isFree"),
            "advancedPricings": [UpdateAdvancedPricing.from_dict(_item) for _item in obj["advancedPricings"]] if obj.get("advancedPricings") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


