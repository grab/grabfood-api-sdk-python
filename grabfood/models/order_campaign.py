# coding: utf-8

"""
Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3

 Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from grabfood.models.order_free_item import OrderFreeItem
from typing import Optional, Set
from typing_extensions import Self

class OrderCampaign(BaseModel):
    """
    OrderCampaign
    """ # noqa: E501
    id: Optional[Annotated[str, Field(strict=True, max_length=64)]] = Field(default=None, description="The campaign's ID returned by GrabFood upon campaign creation.")
    name: Optional[Annotated[str, Field(strict=True, max_length=60)]] = Field(default=None, description="The name of the campaign. This campaign name has been automatically generated by Grab for display in the customer app.")
    campaign_name_for_mex: Optional[StrictStr] = Field(default=None, description="The campaign name provided by the merchant in [Create Campaign](#tag/create-campaign). Whitelist required, reach out to your integration manager.", alias="campaignNameForMex")
    level: Optional[StrictStr] = Field(default=None, description="The campaign level.")
    type: Optional[StrictStr] = Field(default=None, description="The type of campaign.")
    usage_count: Optional[StrictInt] = Field(default=None, description="The redemption count of same campaign in this order.", alias="usageCount")
    mex_funded_ratio: Optional[StrictInt] = Field(default=None, description="The ratio funded by the merchant in percentage.", alias="mexFundedRatio")
    deducted_amount: Optional[StrictInt] = Field(default=None, description="The total discount amount in minor unit format applied to the order based on the campaign's usage count. The amount is rounded to the nearest value for `VND`, `IDR`, and `THB`, as decimals are not supported.  ``` deductedAmount = Item price(tax inclusive) * 20% discount | 2375*0.2=475 ", alias="deductedAmount")
    deducted_part: Optional[StrictStr] = Field(default=None, description="The part that the campaign is applied.", alias="deductedPart")
    applied_item_ids: Optional[List[StrictStr]] = Field(default=None, description="An array of item IDs that get discount under this campaign. `null` if no item applied in this campaign.", alias="appliedItemIDs")
    free_item: Optional[OrderFreeItem] = Field(default=None, alias="freeItem")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["id", "name", "campaignNameForMex", "level", "type", "usageCount", "mexFundedRatio", "deductedAmount", "deductedPart", "appliedItemIDs", "freeItem"]

    @field_validator('level')
    def level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['item', 'category', 'order', 'delivery_fee', 'bundle']):
            raise ValueError("must be one of enum values ('item', 'category', 'order', 'delivery_fee', 'bundle')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['percentage', 'net', 'delivery', 'freeItem', 'bundleSameNet', 'bundleSamePercentage', 'bundleSameFixPrice']):
            raise ValueError("must be one of enum values ('percentage', 'net', 'delivery', 'freeItem', 'bundleSameNet', 'bundleSamePercentage', 'bundleSameFixPrice')")
        return value

    @field_validator('deducted_part')
    def deducted_part_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['basket_amount', 'delivery_fee']):
            raise ValueError("must be one of enum values ('basket_amount', 'delivery_fee')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderCampaign from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of free_item
        if self.free_item:
            _dict['freeItem'] = self.free_item.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if applied_item_ids (nullable) is None
        # and model_fields_set contains the field
        if self.applied_item_ids is None and "applied_item_ids" in self.model_fields_set:
            _dict['appliedItemIDs'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderCampaign from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "campaignNameForMex": obj.get("campaignNameForMex"),
            "level": obj.get("level"),
            "type": obj.get("type"),
            "usageCount": obj.get("usageCount"),
            "mexFundedRatio": obj.get("mexFundedRatio"),
            "deductedAmount": obj.get("deductedAmount"),
            "deductedPart": obj.get("deductedPart"),
            "appliedItemIDs": obj.get("appliedItemIDs"),
            "freeItem": OrderFreeItem.from_dict(obj["freeItem"]) if obj.get("freeItem") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


