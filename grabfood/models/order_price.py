# coding: utf-8

"""
Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3

 Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class OrderPrice(BaseModel):
    """
    A JSON object containing order's price in the minor unit format.
    """ # noqa: E501
    subtotal: StrictInt = Field(description="Total item and modifier price (tax-inclusive) in the minor unit. ``` subtotal = Sum of all (item price * quantity) | 2550*1=2550 ")
    tax: Optional[StrictInt] = Field(default=None, description="GrabFood's tax in the minor unit. Refer to FAQs for more details about [tax](#section/Order/How-is-tax-calculated). ``` tax = (subtotal + merchantChargeFee - merchantFundPromo) * Tax / (1+Tax) | (2550-475)*0.06/1.06=117 ")
    merchant_charge_fee: Optional[StrictInt] = Field(default=None, description="Any additional fee charged by merchant (tax-inclusive), which is 100% paid out to the merchant. Eg. Takeaway, packaging costs, dine-in charge. ", alias="merchantChargeFee")
    grab_fund_promo: Optional[StrictInt] = Field(default=None, description="GrabFood's promo fund in the minor unit. Calculated based on funded ratio. Only present when `paymentType:CASH` or `orderType:DeliveredByRestaurant`. Otherwise, it will be set to `0`.", alias="grabFundPromo")
    merchant_fund_promo: Optional[StrictInt] = Field(default=None, description="The merchant's promo fund in the minor unit. Calculated based on funded ratio.", alias="merchantFundPromo")
    basket_promo: Optional[StrictInt] = Field(default=None, description="The total amount promo applied to the basket items only (item level/order level) in the minor unit, excluding delivery fee. Only present when `paymentType: CASH` or `orderType: DeliveredByRestaurant`. Otherwise, it will be set to `0`.  ``` basketPromo = (grabFundPromo + merchantFundPromo) | 300 + 475 = 775 ", alias="basketPromo")
    delivery_fee: Optional[StrictInt] = Field(default=None, description="The delivery fee in the minor unit. Only present when `paymentType:CASH` or `orderType:DeliveredByRestaurant`. Otherwise, it will be set to `0`.", alias="deliveryFee")
    small_order_fee: Optional[StrictInt] = Field(default=None, description="The fee charged by GrabFood for order that does not meet a certain minimum order value. Only present when `paymentType:CASH` and `orderType:DeliveredByRestaurant`.", alias="smallOrderFee")
    eater_payment: Optional[StrictInt] = Field(default=None, description="The total amount paid by the consumer in the minor unit, excluding some additional fees charged by GrabFood. Only present when `paymentType:CASH` or `orderType:DeliveredByRestaurant`. Otherwise, it will be set to `0`.  ``` eaterPayment = (subtotal + merchantChargeFee + deliveryFee) - (sum of all promo) | (2550+400)-775=2175 ", alias="eaterPayment")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["subtotal", "tax", "merchantChargeFee", "grabFundPromo", "merchantFundPromo", "basketPromo", "deliveryFee", "smallOrderFee", "eaterPayment"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderPrice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderPrice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "subtotal": obj.get("subtotal"),
            "tax": obj.get("tax"),
            "merchantChargeFee": obj.get("merchantChargeFee"),
            "grabFundPromo": obj.get("grabFundPromo"),
            "merchantFundPromo": obj.get("merchantFundPromo"),
            "basketPromo": obj.get("basketPromo"),
            "deliveryFee": obj.get("deliveryFee"),
            "smallOrderFee": obj.get("smallOrderFee"),
            "eaterPayment": obj.get("eaterPayment")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


