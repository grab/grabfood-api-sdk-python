# coding: utf-8

"""
Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3

 Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UpdateDeliveryHourResponse(BaseModel):
    """
    Object contain update store delivery hour response
    """ # noqa: E501
    error_reasons: Optional[List[StrictStr]] = Field(default=None, description="Error message when updating store delivery hour. `null` indicates no error.", alias="errorReasons")
    order_count: StrictInt = Field(description="Total active order for the day.", alias="orderCount")
    scheduled_order_count: StrictInt = Field(description="Total scheduled order during store close period.", alias="scheduledOrderCount")
    close_immediately: StrictBool = Field(description="Indicate the store status after updating delivery hours.", alias="closeImmediately")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["errorReasons", "orderCount", "scheduledOrderCount", "closeImmediately"]

    @field_validator('error_reasons')
    def error_reasons_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['ClosingHoursIneffective', 'ForceUpdated', 'PendingScheduledOrders', 'PendingOrders']):
                raise ValueError("each list item must be one of ('ClosingHoursIneffective', 'ForceUpdated', 'PendingScheduledOrders', 'PendingOrders')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateDeliveryHourResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if error_reasons (nullable) is None
        # and model_fields_set contains the field
        if self.error_reasons is None and "error_reasons" in self.model_fields_set:
            _dict['errorReasons'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateDeliveryHourResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "errorReasons": obj.get("errorReasons"),
            "orderCount": obj.get("orderCount"),
            "scheduledOrderCount": obj.get("scheduledOrderCount"),
            "closeImmediately": obj.get("closeImmediately")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


