# coding: utf-8

"""
Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3

 Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class OrderStateRequest(BaseModel):
    """
    This request pushes the state of an order on GrabFood. 
    """ # noqa: E501
    merchant_id: StrictStr = Field(description="The merchant's ID that is in GrabFood's database.", alias="merchantID")
    partner_merchant_id: Optional[StrictStr] = Field(default=None, description="The merchant's ID that is on the partner's database.", alias="partnerMerchantID")
    order_id: StrictStr = Field(description="The order's ID that is returned from GrabFood. Refer to FAQs for more details about [orderID and shortOrderNumber](#section/Order/What's-the-difference-between-orderID-and-shortOrderNumber).", alias="orderID")
    state: StrictStr = Field(description="The current order state. For takeaway orders, only `DELIVERED` and `CANCELLED` states are pushed.")
    driver_eta: Optional[StrictInt] = Field(default=None, description="The driver's estimated of arrival (ETA) in seconds when the state is `DRIVER_ALLOCATED`.", alias="driverETA")
    code: Optional[StrictStr] = Field(default=None, description="The current order's sub-state. This is in free text so you should only use for reference. Grab may use this for troubleshooting. If you want some analysis, kindly use `state` instead.")
    message: Optional[StrictStr] = Field(default=None, description="Additional information to explain the current order state. May be system status or human entered message.")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["merchantID", "partnerMerchantID", "orderID", "state", "driverETA", "code", "message"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['ACCEPTED', 'DRIVER_ALLOCATED', 'DRIVER_ARRIVED', 'COLLECTED', 'DELIVERED', 'FAILED', 'CANCELLED']):
            raise ValueError("must be one of enum values ('ACCEPTED', 'DRIVER_ALLOCATED', 'DRIVER_ARRIVED', 'COLLECTED', 'DELIVERED', 'FAILED', 'CANCELLED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderStateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if driver_eta (nullable) is None
        # and model_fields_set contains the field
        if self.driver_eta is None and "driver_eta" in self.model_fields_set:
            _dict['driverETA'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderStateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "merchantID": obj.get("merchantID"),
            "partnerMerchantID": obj.get("partnerMerchantID"),
            "orderID": obj.get("orderID"),
            "state": obj.get("state"),
            "driverETA": obj.get("driverETA"),
            "code": obj.get("code"),
            "message": obj.get("message")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


