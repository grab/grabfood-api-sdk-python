# coding: utf-8

"""
Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3

 Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from grabfood.models.currency import Currency
from grabfood.models.dine_in import DineIn
from grabfood.models.order_campaign import OrderCampaign
from grabfood.models.order_feature_flags import OrderFeatureFlags
from grabfood.models.order_item import OrderItem
from grabfood.models.order_price import OrderPrice
from grabfood.models.order_promo import OrderPromo
from grabfood.models.order_ready_estimation import OrderReadyEstimation
from grabfood.models.receiver import Receiver
from typing import Optional, Set
from typing_extensions import Self

class Order(BaseModel):
    """
    A JSON object containing the order information. 
    """ # noqa: E501
    order_id: StrictStr = Field(description="The order's ID that is returned from GrabFood. Refer to FAQs for more details about [orderID and shortOrderNumber](#section/Order/What's-the-difference-between-orderID-and-shortOrderNumber).", alias="orderID")
    short_order_number: StrictStr = Field(description="The GrabFood short order number. This is unique for each merchant per day. Refer to FAQs for more details about [orderID and shortOrderNumber](#section/Order/What's-the-difference-between-orderID-and-shortOrderNumber).", alias="shortOrderNumber")
    merchant_id: StrictStr = Field(description="The merchant's ID that is in GrabFood's database.", alias="merchantID")
    partner_merchant_id: Optional[StrictStr] = Field(default=None, description="The merchant's ID that is on the partner's database.", alias="partnerMerchantID")
    payment_type: StrictStr = Field(description="The payment method used. Refer to FAQs for more details about [paymentType](#section/Order/Does-the-paymentType-affect-partners).", alias="paymentType")
    cutlery: StrictBool = Field(description="The boolean value to indicate whether cutlery are needed or not. Refer to FAQs for more details about [cutlery](#section/Order/What-do-the-true-or-false-values-mean-for-cutlery).")
    order_time: StrictStr = Field(description="The UTC time that a consumer places the order, based on ISO_8601/RFC3339.", alias="orderTime")
    submit_time: Optional[datetime] = Field(default=None, description="The order submit time, based on ISO_8601/RFC3339. `null` in Submit Order payload. Only present in the [List Orders](#tag/list-order) response.", alias="submitTime")
    complete_time: Optional[datetime] = Field(default=None, description="The order complete time, based on ISO_8601/RFC3339. `null` in Submit Order payload. Only present in the [List Orders](#tag/list-order) response.", alias="completeTime")
    scheduled_time: Optional[StrictStr] = Field(default=None, description="The order scheduled time, based on ISO_8601/RFC3339. Empty for non-scheduled orders.", alias="scheduledTime")
    order_state: Optional[StrictStr] = Field(default=None, description="The state of the order. Empty in Submit Order payload. Only present in the [List Orders](#tag/list-order) response. Refer to [Order States](#section/Order-states).", alias="orderState")
    currency: Currency
    feature_flags: OrderFeatureFlags = Field(alias="featureFlags")
    items: List[OrderItem] = Field(description="The ordered items in an array of JSON Object. ")
    campaigns: Optional[List[OrderCampaign]] = Field(default=None, description="The campaigns that are applicable for the order. `null` when there is no campaign applied. Only campaigns that are funded by merchants will be sent. ")
    promos: Optional[List[OrderPromo]] = Field(default=None, description="An array of promotion objects. `null` when there is no promo code applied. Only promotions that are funded by merchants will be sent.")
    price: OrderPrice
    dine_in: Optional[DineIn] = Field(default=None, alias="dineIn")
    receiver: Optional[Receiver] = None
    order_ready_estimation: Optional[OrderReadyEstimation] = Field(default=None, alias="orderReadyEstimation")
    membership_id: Optional[StrictStr] = Field(default=None, description="Membership ID for loyalty project. Only present for loyalty program partners. Empty if not applicable.", alias="membershipID")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["orderID", "shortOrderNumber", "merchantID", "partnerMerchantID", "paymentType", "cutlery", "orderTime", "submitTime", "completeTime", "scheduledTime", "orderState", "currency", "featureFlags", "items", "campaigns", "promos", "price", "dineIn", "receiver", "orderReadyEstimation", "membershipID"]

    @field_validator('payment_type')
    def payment_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['CASH', 'CASHLESS']):
            raise ValueError("must be one of enum values ('CASH', 'CASHLESS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Order from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of currency
        if self.currency:
            _dict['currency'] = self.currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of feature_flags
        if self.feature_flags:
            _dict['featureFlags'] = self.feature_flags.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item_items in self.items:
                if _item_items:
                    _items.append(_item_items.to_dict())
            _dict['items'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in campaigns (list)
        _items = []
        if self.campaigns:
            for _item_campaigns in self.campaigns:
                if _item_campaigns:
                    _items.append(_item_campaigns.to_dict())
            _dict['campaigns'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in promos (list)
        _items = []
        if self.promos:
            for _item_promos in self.promos:
                if _item_promos:
                    _items.append(_item_promos.to_dict())
            _dict['promos'] = _items
        # override the default output from pydantic by calling `to_dict()` of price
        if self.price:
            _dict['price'] = self.price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dine_in
        if self.dine_in:
            _dict['dineIn'] = self.dine_in.to_dict()
        # override the default output from pydantic by calling `to_dict()` of receiver
        if self.receiver:
            _dict['receiver'] = self.receiver.to_dict()
        # override the default output from pydantic by calling `to_dict()` of order_ready_estimation
        if self.order_ready_estimation:
            _dict['orderReadyEstimation'] = self.order_ready_estimation.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if campaigns (nullable) is None
        # and model_fields_set contains the field
        if self.campaigns is None and "campaigns" in self.model_fields_set:
            _dict['campaigns'] = None

        # set to None if promos (nullable) is None
        # and model_fields_set contains the field
        if self.promos is None and "promos" in self.model_fields_set:
            _dict['promos'] = None

        # set to None if dine_in (nullable) is None
        # and model_fields_set contains the field
        if self.dine_in is None and "dine_in" in self.model_fields_set:
            _dict['dineIn'] = None

        # set to None if receiver (nullable) is None
        # and model_fields_set contains the field
        if self.receiver is None and "receiver" in self.model_fields_set:
            _dict['receiver'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Order from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "orderID": obj.get("orderID"),
            "shortOrderNumber": obj.get("shortOrderNumber"),
            "merchantID": obj.get("merchantID"),
            "partnerMerchantID": obj.get("partnerMerchantID"),
            "paymentType": obj.get("paymentType"),
            "cutlery": obj.get("cutlery"),
            "orderTime": obj.get("orderTime"),
            "submitTime": obj.get("submitTime"),
            "completeTime": obj.get("completeTime"),
            "scheduledTime": obj.get("scheduledTime"),
            "orderState": obj.get("orderState"),
            "currency": Currency.from_dict(obj["currency"]) if obj.get("currency") is not None else None,
            "featureFlags": OrderFeatureFlags.from_dict(obj["featureFlags"]) if obj.get("featureFlags") is not None else None,
            "items": [OrderItem.from_dict(_item) for _item in obj["items"]] if obj.get("items") is not None else None,
            "campaigns": [OrderCampaign.from_dict(_item) for _item in obj["campaigns"]] if obj.get("campaigns") is not None else None,
            "promos": [OrderPromo.from_dict(_item) for _item in obj["promos"]] if obj.get("promos") is not None else None,
            "price": OrderPrice.from_dict(obj["price"]) if obj.get("price") is not None else None,
            "dineIn": DineIn.from_dict(obj["dineIn"]) if obj.get("dineIn") is not None else None,
            "receiver": Receiver.from_dict(obj["receiver"]) if obj.get("receiver") is not None else None,
            "orderReadyEstimation": OrderReadyEstimation.from_dict(obj["orderReadyEstimation"]) if obj.get("orderReadyEstimation") is not None else None,
            "membershipID": obj.get("membershipID")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


