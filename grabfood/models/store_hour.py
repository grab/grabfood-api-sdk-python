# coding: utf-8

"""
Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3

 Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List
from grabfood.models.open_period import OpenPeriod
from typing import Optional, Set
from typing_extensions import Self

class StoreHour(BaseModel):
    """
    A JSON object that describes the store hour for each day.
    """ # noqa: E501
    mon: List[OpenPeriod] = Field(description="An array of open periods. Maximum of 3 periods. Blank indicates store close.")
    tue: List[OpenPeriod] = Field(description="An array of open periods. Maximum of 3 periods. Blank indicates store close.")
    wed: List[OpenPeriod] = Field(description="An array of open periods. Maximum of 3 periods. Blank indicates store close.")
    thu: List[OpenPeriod] = Field(description="An array of open periods. Maximum of 3 periods. Blank indicates store close.")
    fri: List[OpenPeriod] = Field(description="An array of open periods. Maximum of 3 periods. Blank indicates store close.")
    sat: List[OpenPeriod] = Field(description="An array of open periods. Maximum of 3 periods. Blank indicates store close.")
    sun: List[OpenPeriod] = Field(description="An array of open periods. Maximum of 3 periods. Blank indicates store close.")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["mon", "tue", "wed", "thu", "fri", "sat", "sun"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StoreHour from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in mon (list)
        _items = []
        if self.mon:
            for _item_mon in self.mon:
                if _item_mon:
                    _items.append(_item_mon.to_dict())
            _dict['mon'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tue (list)
        _items = []
        if self.tue:
            for _item_tue in self.tue:
                if _item_tue:
                    _items.append(_item_tue.to_dict())
            _dict['tue'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in wed (list)
        _items = []
        if self.wed:
            for _item_wed in self.wed:
                if _item_wed:
                    _items.append(_item_wed.to_dict())
            _dict['wed'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in thu (list)
        _items = []
        if self.thu:
            for _item_thu in self.thu:
                if _item_thu:
                    _items.append(_item_thu.to_dict())
            _dict['thu'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in fri (list)
        _items = []
        if self.fri:
            for _item_fri in self.fri:
                if _item_fri:
                    _items.append(_item_fri.to_dict())
            _dict['fri'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sat (list)
        _items = []
        if self.sat:
            for _item_sat in self.sat:
                if _item_sat:
                    _items.append(_item_sat.to_dict())
            _dict['sat'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sun (list)
        _items = []
        if self.sun:
            for _item_sun in self.sun:
                if _item_sun:
                    _items.append(_item_sun.to_dict())
            _dict['sun'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StoreHour from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "mon": [OpenPeriod.from_dict(_item) for _item in obj["mon"]] if obj.get("mon") is not None else None,
            "tue": [OpenPeriod.from_dict(_item) for _item in obj["tue"]] if obj.get("tue") is not None else None,
            "wed": [OpenPeriod.from_dict(_item) for _item in obj["wed"]] if obj.get("wed") is not None else None,
            "thu": [OpenPeriod.from_dict(_item) for _item in obj["thu"]] if obj.get("thu") is not None else None,
            "fri": [OpenPeriod.from_dict(_item) for _item in obj["fri"]] if obj.get("fri") is not None else None,
            "sat": [OpenPeriod.from_dict(_item) for _item in obj["sat"]] if obj.get("sat") is not None else None,
            "sun": [OpenPeriod.from_dict(_item) for _item in obj["sun"]] if obj.get("sun") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


