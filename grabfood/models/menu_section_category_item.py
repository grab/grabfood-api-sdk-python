# coding: utf-8

"""
Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3

 Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from grabfood.models.advanced_pricing import AdvancedPricing
from grabfood.models.modifier_group import ModifierGroup
from grabfood.models.purchasability import Purchasability
from typing import Optional, Set
from typing_extensions import Self

class MenuSectionCategoryItem(BaseModel):
    """
    MenuSectionCategoryItem
    """ # noqa: E501
    id: Annotated[str, Field(strict=True, max_length=64)] = Field(description="The item's ID in the partner system. ")
    name: Annotated[str, Field(strict=True, max_length=80)] = Field(description="The name of the item.")
    name_translation: Optional[Dict[str, StrictStr]] = Field(default=None, description="Translation of the item name. Only support up to 1 translated language. Refer [Menu Translation](#section/Menu-Translation).", alias="nameTranslation")
    available_status: StrictStr = Field(description="The status for the item that is in the category. Refer to FAQs for more details about [availableStatus](#section/Menu/What-is-availableStatus).  Note: In order to set an item as \"UNAVAILABLE\", it is required to update both the `availableStatus` and `maxStock` fields, whereby the `maxStock` value should be set to 0. ", alias="availableStatus")
    description: Optional[Annotated[str, Field(strict=True, max_length=300)]] = Field(default=None, description="The description of the item. There is a custom length limit of 2000 for `VN`. ")
    description_translation: Optional[Dict[str, StrictStr]] = Field(default=None, description="Translation of the item description. Only support up to 1 translated language. Refer [Menu Translation](#section/Menu-Translation).", alias="descriptionTranslation")
    price: StrictInt = Field(description="The item's price (excluding tax) in minor format. For example: 1900 means $19 with `currency.exponent` as 2. Refer to [FAQ](#section/Menu/Is-the-item-price-with-or-without-tax) for more details. ")
    photos: Optional[List[StrictStr]] = Field(default=None, description="An array string for the itemâ€™s image URL links. Refer to FAQs for more details about [images](#section/Menu/What-are-the-recommended-formats-for-an-item-image). ")
    special_type: Optional[StrictStr] = Field(default=None, description="The item's special Tag. Refer to FAQs for more details about [specialType](#section/Menu/What's-specialType). ", alias="specialType")
    taxable: Optional[StrictBool] = Field(default=None, description="**For Indonesia only.** This field allows the configuration for an item to be marked as tax applicable, and marked item would then be included in a commercial invoice to consumers as per the government's regulations. ")
    barcode: Optional[Annotated[str, Field(strict=True, max_length=64)]] = Field(default=None, description="The barcode Number (GTIN). Max 64 allowed. GTIN must be 8, 12, 13, 14 numeric digits. ")
    max_stock: Optional[StrictInt] = Field(default=None, description="Available stocks under inventory for this item. Auto reduce when there is order placed for this item. Empty value implies no limit.  Note: It is necessary to set `maxStock` to 0 if the `availableStatus` of the item is \"UNAVAILABLE\". Item will be set to \"AVAILABLE\" if `maxStock` > 0. ", alias="maxStock")
    advanced_pricing: Optional[AdvancedPricing] = Field(default=None, alias="advancedPricing")
    purchasability: Optional[Purchasability] = None
    modifier_groups: Optional[List[ModifierGroup]] = Field(default=None, description="An array of the modifierGroup JSON objects. Max 30 allowed per item. Refer to [Modifier groups](#modifier-groups) for more information.", alias="modifierGroups")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["id", "name", "nameTranslation", "availableStatus", "description", "descriptionTranslation", "price", "photos", "specialType", "taxable", "barcode", "maxStock", "advancedPricing", "purchasability", "modifierGroups"]

    @field_validator('available_status')
    def available_status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['AVAILABLE', 'UNAVAILABLE', 'HIDE', 'UNAVAILABLETODAY']):
            raise ValueError("must be one of enum values ('AVAILABLE', 'UNAVAILABLE', 'HIDE', 'UNAVAILABLETODAY')")
        return value

    @field_validator('special_type')
    def special_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['alcohol', '']):
            raise ValueError("must be one of enum values ('alcohol', '')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MenuSectionCategoryItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of advanced_pricing
        if self.advanced_pricing:
            _dict['advancedPricing'] = self.advanced_pricing.to_dict()
        # override the default output from pydantic by calling `to_dict()` of purchasability
        if self.purchasability:
            _dict['purchasability'] = self.purchasability.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in modifier_groups (list)
        _items = []
        if self.modifier_groups:
            for _item_modifier_groups in self.modifier_groups:
                if _item_modifier_groups:
                    _items.append(_item_modifier_groups.to_dict())
            _dict['modifierGroups'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MenuSectionCategoryItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "nameTranslation": obj.get("nameTranslation"),
            "availableStatus": obj.get("availableStatus"),
            "description": obj.get("description"),
            "descriptionTranslation": obj.get("descriptionTranslation"),
            "price": obj.get("price"),
            "photos": obj.get("photos"),
            "specialType": obj.get("specialType"),
            "taxable": obj.get("taxable"),
            "barcode": obj.get("barcode"),
            "maxStock": obj.get("maxStock"),
            "advancedPricing": AdvancedPricing.from_dict(obj["advancedPricing"]) if obj.get("advancedPricing") is not None else None,
            "purchasability": Purchasability.from_dict(obj["purchasability"]) if obj.get("purchasability") is not None else None,
            "modifierGroups": [ModifierGroup.from_dict(_item) for _item in obj["modifierGroups"]] if obj.get("modifierGroups") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


