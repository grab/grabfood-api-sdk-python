# coding: utf-8

"""
Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3

 Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from grabfood.models.order_item_modifier import OrderItemModifier
from grabfood.models.out_of_stock_instruction import OutOfStockInstruction
from typing import Optional, Set
from typing_extensions import Self

class OrderItem(BaseModel):
    """
    OrderItem
    """ # noqa: E501
    id: StrictStr = Field(description="The item's externalID in the partner system. ")
    grab_item_id: StrictStr = Field(description="The item's ID in Grab system. Partner can use this field in the `EditOrder` endpoint.", alias="grabItemID")
    quantity: StrictInt = Field(description="The number of the item ordered.")
    price: StrictInt = Field(description="The price for a single item along with its associated modifiers in minor unit and tax-inclusive.  ``` price = Item price(tax inclusive) + Modifier price(tax inclusive) | (2241*1.06)+(165*1.06)=2550 ")
    tax: Optional[StrictInt] = Field(default=None, description="Tax in minor format for a single item along with its associated modifiers. `0` if tax configuration is absent. Refer to FAQs for more details about [tax](#section/Order/How-is-tax-calculated). ``` tax = Item tax + Modifier tax | (2241*0.06)+(165*0.06)=144 ")
    specifications: Optional[Annotated[str, Field(strict=True, max_length=300)]] = Field(default=None, description="An extra note for the merchant. Empty if no note from consumer. ")
    out_of_stock_instruction: Optional[OutOfStockInstruction] = Field(default=None, alias="outOfStockInstruction")
    modifiers: Optional[List[OrderItemModifier]] = Field(default=None, description="An array of JSON objects modifiers.")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["id", "grabItemID", "quantity", "price", "tax", "specifications", "outOfStockInstruction", "modifiers"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of out_of_stock_instruction
        if self.out_of_stock_instruction:
            _dict['outOfStockInstruction'] = self.out_of_stock_instruction.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in modifiers (list)
        _items = []
        if self.modifiers:
            for _item_modifiers in self.modifiers:
                if _item_modifiers:
                    _items.append(_item_modifiers.to_dict())
            _dict['modifiers'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if out_of_stock_instruction (nullable) is None
        # and model_fields_set contains the field
        if self.out_of_stock_instruction is None and "out_of_stock_instruction" in self.model_fields_set:
            _dict['outOfStockInstruction'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "grabItemID": obj.get("grabItemID"),
            "quantity": obj.get("quantity"),
            "price": obj.get("price"),
            "tax": obj.get("tax"),
            "specifications": obj.get("specifications"),
            "outOfStockInstruction": OutOfStockInstruction.from_dict(obj["outOfStockInstruction"]) if obj.get("outOfStockInstruction") is not None else None,
            "modifiers": [OrderItemModifier.from_dict(_item) for _item in obj["modifiers"]] if obj.get("modifiers") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


