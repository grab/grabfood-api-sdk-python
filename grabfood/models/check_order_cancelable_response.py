# coding: utf-8

"""
Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3

 Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from grabfood.models.cancel_order_limit_type import CancelOrderLimitType
from grabfood.models.cancel_reason import CancelReason
from typing import Optional, Set
from typing_extensions import Self

class CheckOrderCancelableResponse(BaseModel):
    """
    
    """ # noqa: E501
    cancel_able: Optional[StrictBool] = Field(default=None, description="The boolean value to indicate whether an order can be cancelled.", alias="cancelAble")
    non_cancellation_reason: Optional[StrictStr] = Field(default=None, description="The reason for the order to be non-cancelable.", alias="nonCancellationReason")
    limit_type: Optional[CancelOrderLimitType] = Field(default=None, alias="limitType")
    limit_times: Optional[StrictInt] = Field(default=None, description="The remaining cancellation quota for the merchant. A value is only returned when the nearest remaining cancellation limit is approaching, else it returns 0.", alias="limitTimes")
    cancel_reasons: Optional[List[CancelReason]] = Field(default=None, description="An array of cancel order reasons JSON objects.", alias="cancelReasons")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["cancelAble", "nonCancellationReason", "limitType", "limitTimes", "cancelReasons"]

    @field_validator('non_cancellation_reason')
    def non_cancellation_reason_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['GKMM (Grab Kitchen Mix & Match) orders cannot be cancelled', 'Self pick-up orders cannot be cancelled', 'Scheduled orders cannot be cancelled', 'Daily cancellation limit reached', 'Weekly cancellation limit reached', 'Monthly cancellation limit reached', 'Driver has been allocated for too long', 'Driver App version is outdated preventing cancellation', 'Order has not yet been allocated preventing cancellation', 'The current status of the order does not allow cancellation', 'Default Error', '']):
            raise ValueError("must be one of enum values ('GKMM (Grab Kitchen Mix & Match) orders cannot be cancelled', 'Self pick-up orders cannot be cancelled', 'Scheduled orders cannot be cancelled', 'Daily cancellation limit reached', 'Weekly cancellation limit reached', 'Monthly cancellation limit reached', 'Driver has been allocated for too long', 'Driver App version is outdated preventing cancellation', 'Order has not yet been allocated preventing cancellation', 'The current status of the order does not allow cancellation', 'Default Error', '')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CheckOrderCancelableResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in cancel_reasons (list)
        _items = []
        if self.cancel_reasons:
            for _item_cancel_reasons in self.cancel_reasons:
                if _item_cancel_reasons:
                    _items.append(_item_cancel_reasons.to_dict())
            _dict['cancelReasons'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CheckOrderCancelableResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cancelAble": obj.get("cancelAble"),
            "nonCancellationReason": obj.get("nonCancellationReason"),
            "limitType": obj.get("limitType"),
            "limitTimes": obj.get("limitTimes"),
            "cancelReasons": [CancelReason.from_dict(_item) for _item in obj["cancelReasons"]] if obj.get("cancelReasons") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


