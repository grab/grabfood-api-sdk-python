# coding: utf-8

"""
Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3

 Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
"""

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from grabfood.models.list_orders_response import ListOrdersResponse

from grabfood.api_client import ApiClient, RequestSerialized
from grabfood.api_response import ApiResponse
from grabfood.rest import RESTResponseType


class ListOrdersApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def list_orders(
        self,
        authorization: Annotated[StrictStr, Field(description="Specify the generated authorization token of the bearer type.")],
        merchant_id: Annotated[StrictStr, Field(description="The merchant's ID that is in GrabFood's database.")],
        var_date: Optional[StrictStr] = None,
        page: Annotated[Optional[StrictInt], Field(description="Specify the page number for the report. Required if orderIDs is not provided.")] = None,
        order_ids: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=10)]], Field(description="List of order IDs. If provided, date and page are not required.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListOrdersResponse:
        """List orders


        :param authorization: Specify the generated authorization token of the bearer type. (required)
        :type authorization: str
        :param merchant_id: The merchant's ID that is in GrabFood's database. (required)
        :type merchant_id: str
        :param var_date:
        :type var_date: str
        :param page: Specify the page number for the report. Required if orderIDs is not provided.
        :type page: int
        :param order_ids: List of order IDs. If provided, date and page are not required.
        :type order_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_orders_serialize(
            authorization=authorization,
            merchant_id=merchant_id,
            var_date=var_date,
            page=page,
            order_ids=order_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListOrdersResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_orders_with_http_info(
        self,
        authorization: Annotated[StrictStr, Field(description="Specify the generated authorization token of the bearer type.")],
        merchant_id: Annotated[StrictStr, Field(description="The merchant's ID that is in GrabFood's database.")],
        var_date: Optional[StrictStr] = None,
        page: Annotated[Optional[StrictInt], Field(description="Specify the page number for the report. Required if orderIDs is not provided.")] = None,
        order_ids: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=10)]], Field(description="List of order IDs. If provided, date and page are not required.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListOrdersResponse]:
        """List orders


        :param authorization: Specify the generated authorization token of the bearer type. (required)
        :type authorization: str
        :param merchant_id: The merchant's ID that is in GrabFood's database. (required)
        :type merchant_id: str
        :param var_date:
        :type var_date: str
        :param page: Specify the page number for the report. Required if orderIDs is not provided.
        :type page: int
        :param order_ids: List of order IDs. If provided, date and page are not required.
        :type order_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_orders_serialize(
            authorization=authorization,
            merchant_id=merchant_id,
            var_date=var_date,
            page=page,
            order_ids=order_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListOrdersResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_orders_without_preload_content(
        self,
        authorization: Annotated[StrictStr, Field(description="Specify the generated authorization token of the bearer type.")],
        merchant_id: Annotated[StrictStr, Field(description="The merchant's ID that is in GrabFood's database.")],
        var_date: Optional[StrictStr] = None,
        page: Annotated[Optional[StrictInt], Field(description="Specify the page number for the report. Required if orderIDs is not provided.")] = None,
        order_ids: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=10)]], Field(description="List of order IDs. If provided, date and page are not required.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List orders


        :param authorization: Specify the generated authorization token of the bearer type. (required)
        :type authorization: str
        :param merchant_id: The merchant's ID that is in GrabFood's database. (required)
        :type merchant_id: str
        :param var_date:
        :type var_date: str
        :param page: Specify the page number for the report. Required if orderIDs is not provided.
        :type page: int
        :param order_ids: List of order IDs. If provided, date and page are not required.
        :type order_ids: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_orders_serialize(
            authorization=authorization,
            merchant_id=merchant_id,
            var_date=var_date,
            page=page,
            order_ids=order_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListOrdersResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_orders_serialize(
        self,
        authorization,
        merchant_id,
        var_date,
        page,
        order_ids,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'orderIDs': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if merchant_id is not None:
            
            _query_params.append(('merchantID', merchant_id))
            
        if var_date is not None:
            
            _query_params.append(('date', var_date))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if order_ids is not None:
            
            _query_params.append(('orderIDs', order_ids))
            
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/partner/v1/orders',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


